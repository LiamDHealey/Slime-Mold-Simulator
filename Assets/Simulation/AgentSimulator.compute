// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel SimulateAgents

struct Agent
{
    float3 position;
    float yaw;
    float pitch;
};

struct Sensor
{
    float yaw;
    float pitch;
    float distance;
    float yawTurnSpeed;
    float pitchTurnSpeed;
};

RWTexture3D<float> Result;
RWStructuredBuffer<Agent> Agents;
RWStructuredBuffer<Sensor> Sensors;


float AgentSpeed;
float Time;
float3 MaxBounds;
int NumSensors;

#define PI 3.1415926535897932384626433


// Sudo random hash function from www.cs.ubc.ca/~rbridson/docs/schechter-sca08-turbulence.pdf
uint RandomInt(uint seed)
{
    seed ^= 2747636419u;
    seed *= 2654435769u;
    seed ^= seed >> 16;
    seed *= 2654435769u;
    seed ^= seed >> 16;
    seed *= 2654435769u;
    return seed;
}

float RandomFloat(uint seed)
{
    return RandomInt(seed) * 0.00000000023283064370807973754314699618684756480782468915167;
}

float RandomAngle(uint seed)
{
    // Scale from 0 - MaxInt to -PI - PI
    return RandomInt(seed) * 0.000000001462918079607771839139298211247265334157646664629657 - PI;
}

uint GetSeed(uint3 id)
{
    return Agents[id.x].position.y + Agents[id.x].position.x + RandomInt(id.x + Time * 100000);
}

float3 GetDirection(float yaw, float pitch)
{
    float x = cos(pitch);
    return float3(cos(yaw) * x, sin(yaw) * x, sin(pitch));
}

float GetSensorWeight(uint id, uint i)
{
    float yaw = Sensors[i].yaw + Agents[id].yaw;
    float pitch = Sensors[i].pitch + Agents[id].pitch;
    float3 position = Agents[id].position + GetDirection(yaw, pitch) * Sensors[i].distance;
    return Result[position];
}

[numthreads(64, 1, 1)]
void SimulateAgents(uint3 id : SV_DispatchThreadID)
{
    // Turn Agents
    float forwardWeight = GetSensorWeight(id.x, 0);
    float greatestWeight = forwardWeight;
    int greatestIndex = -1;
    bool forwardLeast = true;
    for (int i = 1; i < NumSensors; i++)
    {
        float weight = GetSensorWeight(id.x, i);
        if (weight > greatestWeight)
        {
            greatestWeight = weight;
            greatestIndex = i;
        }
        if (weight <= forwardWeight)
        {
            forwardLeast = false;
        }
    }
    
    if (forwardLeast)
    {
        float random = (RandomFloat(GetSeed(id)) - 0.5) * 2.0;
        Agents[id.x].yaw += random * Sensors[0].yawTurnSpeed;
        random = (RandomFloat(GetSeed(id)) - 0.5) * 2.0;
        Agents[id.x].pitch += random * Sensors[0].pitchTurnSpeed;
    }
    else if (greatestIndex > 0)
    {
        Agents[id.x].yaw += Sensors[0].yawTurnSpeed;
        Agents[id.x].pitch += Sensors[0].pitchTurnSpeed;
    }
    
    Result[Agents[id.x].position] = 1;
    
    
    
    
    // Move Agents
    float3 forward = GetDirection(Agents[id.x].yaw, Agents[id.x].pitch);
    Agents[id.x].position += forward * AgentSpeed;
    
    
    
    
    // Bounce Agents
    bool outOfBounds = 
        Agents[id.x].position.x < 0 || 
        Agents[id.x].position.x > MaxBounds.x ||
        Agents[id.x].position.y < 0 ||
        Agents[id.x].position.y > MaxBounds.y ||
        Agents[id.x].position.z < 0 || 
        Agents[id.x].position.z > MaxBounds.z;
    
    if (outOfBounds)
    {
        Agents[id.x].yaw = RandomAngle(GetSeed(id));
        Agents[id.x].pitch = RandomAngle(GetSeed(GetSeed(id)));
    }
    
    if (Agents[id.x].position.x < 0)
    {
        Agents[id.x].position.x *= -1;
    }
    else if (Agents[id.x].position.x > MaxBounds.x)
    {
        Agents[id.x].position.x = 2 * MaxBounds.x - Agents[id.x].position.x;
    }
    if (Agents[id.x].position.y < 0)
    {
        Agents[id.x].position.y *= -1;
    }
    else if (Agents[id.x].position.y > MaxBounds.y)
    {
        Agents[id.x].position.y = 2 * MaxBounds.y - Agents[id.x].position.y;
    }
}